# SQLAlchemy Polymorphic Associations - Design & AI Prompt

## Overview

This document provides a technical design overview using a table-per-association pattern to manage polymorphic associations in SQLAlchemy. It serves as both a design document and an AI prompt.

## Technical Architecture

### Models

- **User**: Represents a user in the system.
  - **Attributes**: `id`, `name`, `email`
  - **Relationships**: None

- **Report**: Represents a report in the system.
  - **Attributes**: `id`, `species`
  - **Relationships**: 
    - `report_participant_associations`: Relationship to `ReportParticipants`
    - `participants`: AssociationProxy to `Participant` through `report_participant_associations`
  - **Methods**:
    - `participants_count`: Property to get the count of participants in the report

- **Participant**: Base class for participants in reports.
  - **Attributes**: `id`, `type`
  - **Relationships**: 
    - `participant_report_associations`: Relationship to `ReportParticipants`
    - `reports`: AssociationProxy to `Report` through `participant_report_associations`
  - **Polymorphic**: Yes, based on `type`
  - **Methods**:
    - `reports_count`: Property to get the count of reports for the participant

- **UnregisteredParticipant**: Represents an unregistered participant.
  - **Attributes**: `id`, `name`, `email`
  - **Relationships**: Inherits from `Participant`
  - **Polymorphic Identity**: `unregistered`

- **RegisteredParticipant**: Represents a registered participant.
  - **Attributes**: `user_id`
  - **Relationships**: 
    - `user`: Relationship to `User`
  - **Polymorphic Identity**: `registered`
  - **Methods**:
    - `name`: Property to get the name of the user
    - `email`: Property to get the email of the user

- **ReportParticipants**: Base class for the association between reports and participants.
  - **Attributes**: `id`, `type`, `role`, `report_id`, `participant_id`
  - **Relationships**: 
    - `report`: Relationship to `Report`
    - `participant`: Relationship to `Participant`
  - **Polymorphic**: Yes, based on `type`
  - **Constraints**:
      - `role in ('creator', 'reporter', 'observer')`
      - `Unique(report_id, role)`
      - Instantiation: `RegisteredParticipant` and `UnregisteredParticipant` have to be handled differently. Each `RegisteredParticipant` is created based on the `User.id`. There can be only one entry for each `User.id`. If a `RegisteredParticipant` with the same `user_id` already exists, do not raise an error but instead discard the new instance and use the existing one.

- **ReportParticipantsUnregistered**: Represents the association between a report and an unregistered participant.
  - **Attributes**: `id`
  - **Relationships**: Inherits from `ReportParticipants`
  - **Polymorphic Identity**: `unregistered`

- **ReportParticipantsRegistered**: Represents the association between a report and a registered participant.
  - **Attributes**: `id`
  - **Relationships**: Inherits from `ReportParticipants`
  - **Polymorphic Identity**: `registered`

### Key Points

- Use of eager loading for efficiency.
- Enforce polymorphic associations via `__mapper_args__`.
- Implement association proxies for simplified querying.

## Pseudocode Examples

### Example: count participants for a report
```python
@hybrid_property
def participants_count(self):
    return len(self.participants)

@participants_count.expression
def participants_count(cls):
    return (
        select(func.count(ReportParticipants.id))
        .where(ReportParticipants.report_id == cls.id)
        .scalar_subquery()
    )
```

### Example: adding participants to a report with role checks
```python
with Session() as session:
    report = Report(
      species="Species Name",
      participants=[
          ReportParticipant(user_id=1),  # creates a `RegisteredReportParticipant`
          ReportParticipant(name="John Weir", email="john@weir.com")  # creates a `UnregisteredReportParticipant`
      ]
    )
    session.add(report)
    session.commit()
```

## Improvement Suggestions

- **Approach 1**: Structure the document with clear sectioning, ensuring that both the high-level design and low-level pseudocode are separate.
- **Approach 2**: Streamline content by using concise pseudocode examples and formal language, avoiding excessive narrative while preserving technical precision.

## Techniques Used

- **Polymorphic Associations**: Implemented using SQLAlchemy's `polymorphic_on` and `polymorphic_identity`.
- **Association Proxy**: Used to simplify access to related objects through intermediate association tables.
- **Table-Per-Association Pattern**: Each association type has its own table, allowing for flexible and efficient schema design.

## Example Queries

### Retrieve all reports with their participants
```python
with Session() as session:
    reports = session.query(Report).all()
    for report in reports:
        print(report, report.participants)
```

### Retrieve all participants and their reports
```python
with Session() as session:
    participants = session.query(Participant).all()
    for participant in participants:
        print(participant, participant.reports)
```

## Common Use Cases

- **Adding a new participant to a report**:
  ```python
  with Session() as session:
      report = Report(
        species="Species Name",
        participants=[
            ReportParticipant(user_id=1),  # creates a `RegisteredReportParticipant`
            ReportParticipant(name="John Weir", email="john@weir.com")  # creates a `UnregisteredReportParticipant`
        ]
      )
      session.add(report)
      session.commit()
  ```

- **Deleting a participant from a report**


## Troubleshooting Tips

- Verify that each model's polymorphic_identity is correctly set.
   - Confirm polymorphic_identity settings, foreign key constraints, and eager loading for critical associations.
- Enable SQLAlchemy's echo mode (echo=True) to log SQL queries for debugging.
   - Activate echo=True in SQLAlchemy to monitor and troubleshoot SQL queries.
- Use options like viewonly, cascade="all, delete-orphan", and back_populates to maintain data integrity.
- Prefer hybrid properties over simple @property methods when applicable.erty methods.

## Future Enhancements
   
1. Centralize __mapper_args__ configuration:  
   - Create a helper function to set common __mapper_args__ to reduce redundancy.
2. Performance optimizations:
   - Add indexes on discriminator columns (e.g., `type` in Participant and ReportParticipants) for faster polymorphic queries.
3. Use `@hybrid_property` instead of `@property`
4. Documentation improvements:
   - Add comprehensive docstrings to models and methods for clarity and maintainability.
5. Improve __repr__ methods:
   - Ensure __repr__ methods provide enough context for debugging without triggering lazy loads or recursive queries.
